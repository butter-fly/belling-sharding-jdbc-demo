<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd  
        http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<context:component-scan base-package="com.qiguan.sharding" />

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.qiguan.sharding.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="shardingDataSource" />
		<property name="mapperLocations" value="classpath*:mapper/*Mapper.xml" />
	</bean>

	<!-- 配置好dataSourceRulue,即对数据源进行管理 -->
	<bean id="dataSourceRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.DataSourceRule">
		<constructor-arg>
			<map>
				<entry key="sharding_0" value-ref="sharding_0" />
				<entry key="sharding_1" value-ref="sharding_1" />
			</map>
		</constructor-arg>
	</bean>

	<!-- t_user分库策略 -->
	<bean id="userSingleKeyDatabaseShardingAlgorithm"  class="com.qiguan.sharding.algorithm.UserSingleKeyDatabaseShardingAlgorithm" />
	<bean id="userDatabaseShardingStrategy" class="com.dangdang.ddframe.rdb.sharding.api.strategy.database.DatabaseShardingStrategy">
		<constructor-arg index="0" value="user_id" /> 
		<constructor-arg index="1" ref="userSingleKeyDatabaseShardingAlgorithm" />
	</bean>

	<!-- t_user 分表策略 -->
	<bean id="userSingleKeyTableShardingAlgorithm" class="com.qiguan.sharding.algorithm.UserSingleKeyTableShardingAlgorithm" />
	<bean id="userTableShardingStrategy" class="com.dangdang.ddframe.rdb.sharding.api.strategy.table.TableShardingStrategy">
		<constructor-arg index="0" value="user_id" />
		<constructor-arg index="1" ref="userSingleKeyTableShardingAlgorithm" />
	</bean>
	
	<!-- 对t_user表的配置，进行分库配置，逻辑表名为t_user，每个库有实际的三张表 -->
	<bean id="userTableRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.TableRule">
		<constructor-arg value="t_user" index="0" />
		<constructor-arg index="1">
			<list>
				<value>t_user_0</value>
				<value>t_user_1</value>
				<value>t_user_2</value>
			</list>
		</constructor-arg>
		<constructor-arg index="2" ref="dataSourceRule" /> <!-- 数据源 -->
		<constructor-arg index="3" ref="userDatabaseShardingStrategy" /> <!-- 分库策略 -->
		<constructor-arg index="4" ref="userTableShardingStrategy" /> <!-- 分表策略 -->
	</bean>

	<!-- 构成分库分表的规则 传入数据源集合和每个表的分库分表的具体规则 -->
	<bean id="shardingRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.ShardingRule">
		<constructor-arg index="0" ref="dataSourceRule" />
		<constructor-arg index="1">
			<list>
				<ref bean="userTableRule" />
			</list>
		</constructor-arg>
	</bean>
	

	<!-- 对datasource分库进行封装 -->
	<bean id="shardingDataSource" class="com.dangdang.ddframe.rdb.sharding.api.ShardingDataSource">
		<constructor-arg ref="shardingRule" />
	</bean>

	<!-- 事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="shardingDataSource" />
	</bean>
	
	<!-- 开启注解式事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" /> 
</beans>